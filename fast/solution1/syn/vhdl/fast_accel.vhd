-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.1 (64-bit)
-- Version: 2022.1
-- Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity fast_accel is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    img_in_TDATA : IN STD_LOGIC_VECTOR (15 downto 0);
    img_in_TVALID : IN STD_LOGIC;
    img_in_TREADY : OUT STD_LOGIC;
    threshold : IN STD_LOGIC_VECTOR (31 downto 0);
    img_out_TDATA : OUT STD_LOGIC_VECTOR (15 downto 0);
    img_out_TVALID : OUT STD_LOGIC;
    img_out_TREADY : IN STD_LOGIC;
    rows : IN STD_LOGIC_VECTOR (31 downto 0);
    cols : IN STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of fast_accel is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "fast_accel_fast_accel,hls_ip_2022_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg400-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=3.130000,HLS_SYN_LAT=16783,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=7766,HLS_SYN_LUT=1651,HLS_VERSION=2022_1}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (3 downto 0) := "0010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (3 downto 0) := "0100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_FFFFFFFD : STD_LOGIC_VECTOR (31 downto 0) := "11111111111111111111111111111101";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";

    signal ap_rst_n_inv : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal op2_assign_fu_73_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal op2_assign_reg_100 : STD_LOGIC_VECTOR (31 downto 0);
    signal op2_assign_1_fu_79_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal op2_assign_1_reg_105 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fast_accel_Pipeline_Compute_Loop_fu_60_ap_start : STD_LOGIC;
    signal grp_fast_accel_Pipeline_Compute_Loop_fu_60_ap_done : STD_LOGIC;
    signal grp_fast_accel_Pipeline_Compute_Loop_fu_60_ap_idle : STD_LOGIC;
    signal grp_fast_accel_Pipeline_Compute_Loop_fu_60_ap_ready : STD_LOGIC;
    signal grp_fast_accel_Pipeline_Compute_Loop_fu_60_img_out_TREADY : STD_LOGIC;
    signal grp_fast_accel_Pipeline_Compute_Loop_fu_60_img_in_TREADY : STD_LOGIC;
    signal grp_fast_accel_Pipeline_Compute_Loop_fu_60_img_out_TDATA : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_fast_accel_Pipeline_Compute_Loop_fu_60_img_out_TVALID : STD_LOGIC;
    signal grp_fast_accel_Pipeline_Compute_Loop_fu_60_ap_start_reg : STD_LOGIC := '0';
    signal ap_NS_fsm : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_NS_fsm_state2 : STD_LOGIC;
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal regslice_both_img_out_U_apdone_blk : STD_LOGIC;
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_fsm_state2_blk : STD_LOGIC;
    signal ap_ST_fsm_state3_blk : STD_LOGIC;
    signal ap_ST_fsm_state4_blk : STD_LOGIC;
    signal regslice_both_img_in_U_apdone_blk : STD_LOGIC;
    signal img_in_TDATA_int_regslice : STD_LOGIC_VECTOR (15 downto 0);
    signal img_in_TVALID_int_regslice : STD_LOGIC;
    signal img_in_TREADY_int_regslice : STD_LOGIC;
    signal regslice_both_img_in_U_ack_in : STD_LOGIC;
    signal img_out_TREADY_int_regslice : STD_LOGIC;
    signal regslice_both_img_out_U_vld_out : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component fast_accel_fast_accel_Pipeline_Compute_Loop IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        img_in_TVALID : IN STD_LOGIC;
        img_out_TREADY : IN STD_LOGIC;
        threshold : IN STD_LOGIC_VECTOR (31 downto 0);
        cols : IN STD_LOGIC_VECTOR (31 downto 0);
        op2_assign : IN STD_LOGIC_VECTOR (31 downto 0);
        op2_assign_1 : IN STD_LOGIC_VECTOR (31 downto 0);
        rows : IN STD_LOGIC_VECTOR (31 downto 0);
        img_in_TDATA : IN STD_LOGIC_VECTOR (15 downto 0);
        img_in_TREADY : OUT STD_LOGIC;
        img_out_TDATA : OUT STD_LOGIC_VECTOR (15 downto 0);
        img_out_TVALID : OUT STD_LOGIC );
    end component;


    component fast_accel_regslice_both IS
    generic (
        DataWidth : INTEGER );
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        data_in : IN STD_LOGIC_VECTOR (DataWidth-1 downto 0);
        vld_in : IN STD_LOGIC;
        ack_in : OUT STD_LOGIC;
        data_out : OUT STD_LOGIC_VECTOR (DataWidth-1 downto 0);
        vld_out : OUT STD_LOGIC;
        ack_out : IN STD_LOGIC;
        apdone_blk : OUT STD_LOGIC );
    end component;



begin
    grp_fast_accel_Pipeline_Compute_Loop_fu_60 : component fast_accel_fast_accel_Pipeline_Compute_Loop
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_fast_accel_Pipeline_Compute_Loop_fu_60_ap_start,
        ap_done => grp_fast_accel_Pipeline_Compute_Loop_fu_60_ap_done,
        ap_idle => grp_fast_accel_Pipeline_Compute_Loop_fu_60_ap_idle,
        ap_ready => grp_fast_accel_Pipeline_Compute_Loop_fu_60_ap_ready,
        img_in_TVALID => img_in_TVALID_int_regslice,
        img_out_TREADY => grp_fast_accel_Pipeline_Compute_Loop_fu_60_img_out_TREADY,
        threshold => threshold,
        cols => cols,
        op2_assign => op2_assign_reg_100,
        op2_assign_1 => op2_assign_1_reg_105,
        rows => rows,
        img_in_TDATA => img_in_TDATA_int_regslice,
        img_in_TREADY => grp_fast_accel_Pipeline_Compute_Loop_fu_60_img_in_TREADY,
        img_out_TDATA => grp_fast_accel_Pipeline_Compute_Loop_fu_60_img_out_TDATA,
        img_out_TVALID => grp_fast_accel_Pipeline_Compute_Loop_fu_60_img_out_TVALID);

    regslice_both_img_in_U : component fast_accel_regslice_both
    generic map (
        DataWidth => 16)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => img_in_TDATA,
        vld_in => img_in_TVALID,
        ack_in => regslice_both_img_in_U_ack_in,
        data_out => img_in_TDATA_int_regslice,
        vld_out => img_in_TVALID_int_regslice,
        ack_out => img_in_TREADY_int_regslice,
        apdone_blk => regslice_both_img_in_U_apdone_blk);

    regslice_both_img_out_U : component fast_accel_regslice_both
    generic map (
        DataWidth => 16)
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        data_in => grp_fast_accel_Pipeline_Compute_Loop_fu_60_img_out_TDATA,
        vld_in => grp_fast_accel_Pipeline_Compute_Loop_fu_60_img_out_TVALID,
        ack_in => img_out_TREADY_int_regslice,
        data_out => img_out_TDATA,
        vld_out => regslice_both_img_out_U_vld_out,
        ack_out => img_out_TREADY,
        apdone_blk => regslice_both_img_out_U_apdone_blk);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    grp_fast_accel_Pipeline_Compute_Loop_fu_60_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_fast_accel_Pipeline_Compute_Loop_fu_60_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_NS_fsm_state2) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    grp_fast_accel_Pipeline_Compute_Loop_fu_60_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_fast_accel_Pipeline_Compute_Loop_fu_60_ap_ready = ap_const_logic_1)) then 
                    grp_fast_accel_Pipeline_Compute_Loop_fu_60_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state1)) then
                op2_assign_1_reg_105 <= op2_assign_1_fu_79_p2;
                op2_assign_reg_100 <= op2_assign_fu_73_p2;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, grp_fast_accel_Pipeline_Compute_Loop_fu_60_ap_done, ap_CS_fsm_state3, ap_CS_fsm_state4, regslice_both_img_out_U_apdone_blk)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                if (((grp_fast_accel_Pipeline_Compute_Loop_fu_60_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state4 => 
                if (((regslice_both_img_out_U_apdone_blk = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_NS_fsm_state2 <= ap_NS_fsm(1);

    ap_ST_fsm_state1_blk_assign_proc : process(ap_start)
    begin
        if ((ap_start = ap_const_logic_0)) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state2_blk <= ap_const_logic_0;

    ap_ST_fsm_state3_blk_assign_proc : process(grp_fast_accel_Pipeline_Compute_Loop_fu_60_ap_done)
    begin
        if ((grp_fast_accel_Pipeline_Compute_Loop_fu_60_ap_done = ap_const_logic_0)) then 
            ap_ST_fsm_state3_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state3_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state4_blk_assign_proc : process(regslice_both_img_out_U_apdone_blk)
    begin
        if ((regslice_both_img_out_U_apdone_blk = ap_const_logic_1)) then 
            ap_ST_fsm_state4_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state4_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_CS_fsm_state4, regslice_both_img_out_U_apdone_blk)
    begin
        if (((regslice_both_img_out_U_apdone_blk = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state4, regslice_both_img_out_U_apdone_blk)
    begin
        if (((regslice_both_img_out_U_apdone_blk = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;

    grp_fast_accel_Pipeline_Compute_Loop_fu_60_ap_start <= grp_fast_accel_Pipeline_Compute_Loop_fu_60_ap_start_reg;
    grp_fast_accel_Pipeline_Compute_Loop_fu_60_img_out_TREADY <= (img_out_TREADY_int_regslice and ap_CS_fsm_state3);
    img_in_TREADY <= regslice_both_img_in_U_ack_in;

    img_in_TREADY_int_regslice_assign_proc : process(grp_fast_accel_Pipeline_Compute_Loop_fu_60_img_in_TREADY, ap_CS_fsm_state3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            img_in_TREADY_int_regslice <= grp_fast_accel_Pipeline_Compute_Loop_fu_60_img_in_TREADY;
        else 
            img_in_TREADY_int_regslice <= ap_const_logic_0;
        end if; 
    end process;

    img_out_TVALID <= regslice_both_img_out_U_vld_out;
    op2_assign_1_fu_79_p2 <= std_logic_vector(unsigned(cols) + unsigned(ap_const_lv32_FFFFFFFD));
    op2_assign_fu_73_p2 <= std_logic_vector(unsigned(rows) + unsigned(ap_const_lv32_FFFFFFFD));
end behav;
